cmake_minimum_required(VERSION 2.6)
project(optimization_toolkit)

# This function is given a list of complete header files (e.g. from a
# BLOB_RECURSE) command and prints them to a standard C++ header file of the
# given name.
function(createMasterHeader headerList filename includeGuard)
	# Get the date
	set(date "")
	string(TIMESTAMP date)

	# Print some leading material
	set(output "")
	set(output "${output}// File:          ${filename}\n")
	set(output "${output}// Creation Date: ${date}\n")
	set(output "${output}// NOTE:          This file has been autogenerated. Do not modify.\n\n")
	set(output "${output}\#ifndef ${includeGuard}\n#define ${includeGuard}\n\n")

	foreach( header ${headerList} )
		# Separate the header file name from its path
		set(index "")
		string(FIND ${header} "/" index REVERSE )
		MATH(EXPR index "${index}+1")
		set(short "")
		string(SUBSTRING ${header} ${index} -1 short)

		# Write the header name to the output
		set(output "${output}\#include \"${short}\"\n")
	endforeach()

	# Print trailing material
	set(output "${output}\n\#endif")

	# Write the actual file
	file(WRITE ${filename} ${output})

endfunction(createMasterHeader)

# If the user doesn't specify a build type (e.g. with -DCMAKE_BUILD_TYPE=Release),
# choose Release as the default value.
if (NOT CMAKE_BUILD_TYPE)
	set (CMAKE_BUILD_TYPE "Release" CACHE STRING "Build Type" FORCE)
endif(NOT CMAKE_BUILD_TYPE)
message("Compiling in ${CMAKE_BUILD_TYPE} mode.")

# Add compiler flags here (e.g. -O3, -Wall, etc.)
# This is also needed to use C++11. "-std=c++11"
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++11 -Wall -Wextra -g -gdwarf-2")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++11 -O3 -Wfatal-errors")

# Set the location of the final executable to be where cmake/make are called
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

# Tell the compiler where to find the headers
include_directories(include)
include_directories(include/Functions)
include_directories(include/Trainers)
include_directories(include/Utils)

# Create lists of all of the header files and the source files
file(GLOB_RECURSE HEADERS "include/*.h")

# Make a copy of the original list and remove any headers that shouldn't be automatically included
set(HEADERS_CPY ${HEADERS})
list(REMOVE_ITEM HEADERS_CPY "${CMAKE_CURRENT_SOURCE_DIR}/include/Acceleration/Acceleration_CPU.h")
list(REMOVE_ITEM HEADERS_CPY "${CMAKE_CURRENT_SOURCE_DIR}/include/Acceleration/Acceleration_NVBlas.h")
list(REMOVE_ITEM HEADERS_CPY "${CMAKE_CURRENT_SOURCE_DIR}/include/Acceleration/Acceleration_OpenBlas.h")

# Generage the master header and include it with the other sources
createMasterHeader("${HEADERS_CPY}" "opkit.h" "OPKIT_H")
set(HEADERS ${HEADERS} "opkit.h")

# Copy all of the .h files to /usr/local/include
INSTALL(FILES ${HEADERS} DESTINATION "include/opkit")
